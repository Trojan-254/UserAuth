<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Zetu Cart - Manage Products</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-gradient-to-b from-orange-600 to-orange-700 text-white p-6 shadow-xl flex flex-col">
      <div class="flex items-center mb-10">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
        </svg>
        <h2 class="text-2xl font-bold">Seller Portal</h2>
      </div>

      <nav class="space-y-2 flex-1">
        <a href="#" class="flex items-center p-3 rounded-lg hover:bg-orange-500 transition-colors duration-200">
          <i class="fas fa-chart-line w-5 mr-3"></i>
          Dashboard
        </a>
        <a href="#" class="flex items-center p-3 rounded-lg bg-orange-500 hover:bg-orange-400 transition-colors duration-200">
          <i class="fas fa-box w-5 mr-3"></i>
          Products
        </a>
        <a href="#" class="flex items-center p-3 rounded-lg hover:bg-orange-500 transition-colors duration-200">
          <i class="fas fa-shopping-bag w-5 mr-3"></i>
          Orders
        </a>
        <a href="#" class="flex items-center p-3 rounded-lg hover:bg-orange-500 transition-colors duration-200">
          <i class="fas fa-warehouse w-5 mr-3"></i>
          Inventory
        </a>
        <a href="#" class="flex items-center p-3 rounded-lg hover:bg-orange-500 transition-colors duration-200">
          <i class="fas fa-users w-5 mr-3"></i>
          Customers
        </a>
      </nav>

      <div class="mt-auto">
        <div class="p-4 bg-orange-500 rounded-lg mb-4">
          <p class="text-sm mb-2">Verification Status</p>
          <div class="flex items-center">
            <span class="bg-green-500 px-2 py-1 rounded text-xs">Verified</span>
          </div>
        </div>
        <button class="w-full flex items-center p-3 rounded-lg hover:bg-orange-500 transition-colors duration-200">
          <i class="fas fa-sign-out-alt w-5 mr-3"></i>
          Logout
        </button>
      </div>
    </aside>

    <main class="flex-1 p-8">
      <!-- Top Navigation -->
      <nav class="bg-white p-4 rounded-xl shadow-sm mb-8 flex justify-between items-center">
        <div class="flex items-center">
          <div class="relative">
            <input type="text" placeholder="Search products..." class="pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:border-orange-500">
            <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <a href="#" class="relative">
            <i class="fas fa-bell text-gray-600 text-xl"></i>
            <span class="absolute -top-2 -right-2 bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">3</span>
          </a>
          <div class="flex items-center space-x-2">
            <img src="<%= seller.profileImage || '/api/placeholder/32/32' %>" alt="Profile" class="w-8 h-8 rounded-full">
            <span class="text-gray-700 font-bold"><%= seller %></span>
        </div>
        </div>
      </nav>

      <!-- Product Management Header -->
      <div class="mb-8 flex justify-between items-center">
        <div>
          <h1 class="text-2xl font-bold text-gray-800">Bidhaa Zangu (My Products)</h1>
          <p class="text-gray-600">Manage your product catalog</p>
        </div>
        <button onclick="showAddProductModal()" class="bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg flex items-center space-x-2">
          <i class="fas fa-plus"></i>
          <span>Add New Product</span>
        </button>
      </div>

      <!-- Product Filters -->
      <div class="bg-white p-6 rounded-xl shadow-sm mb-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
            <select name="category" onchange="this.form.submit()" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500">
                <option value="">All Categories</option>
                <option value="handcrafts" <%= query.category === 'handcrafts' ? 'selected' : '' %>>Handcrafts</option>
                <option value="agriculture" <%= query.category === 'agriculture' ? 'selected' : '' %>>Agricultural Products</option>
                <option value="textiles" <%= query.category === 'textiles' ? 'selected' : '' %>>Textiles & Fabrics</option>
                <option value="food" <%= query.category === 'food' ? 'selected' : '' %>>Food & Beverages</option>
                <option value="beauty" <%= query.category === 'beauty' ? 'selected' : '' %>>Beauty & Wellness</option>
            </select>
        </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Stock Status</label>
            <select class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500">
              <option value="">All Status</option>
              <option value="in_stock">In Stock</option>
              <option value="low_stock">Low Stock</option>
              <option value="out_of_stock">Out of Stock</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Price Range</label>
            <div class="flex space-x-2">
              <input type="number" placeholder="Min" class="w-1/2 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500">
              <input type="number" placeholder="Max" class="w-1/2 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500">
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
            <select class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="price_high">Price: High to Low</option>
              <option value="price_low">Price: Low to High</option>
              <option value="bestselling">Best Selling</option>
            </select>
          </div>
        </div>
      </div>

      <!--Product grid-->

      <!-- Product Grid -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
  <% if (products && products.length > 0) { %>
      <% products.forEach(function(product) { %>
          <div class="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-300">
              <div class="relative">
                  <img src="/uploads/<%= product.mainImage %>" 
                       alt="<%= product.name %>" 
                       class="w-full h-48 object-cover">
                  <div class="absolute top-2 right-2 space-x-2">
                      <button onclick="editProduct('<%= product._id %>')" 
                              class="bg-white p-2 rounded-full shadow hover:bg-gray-100">
                          <i class="fas fa-edit text-gray-600"></i>
                      </button>
                      <button onclick="confirmDelete('<%= product._id %>')" 
                              class="bg-white p-2 rounded-full shadow hover:bg-gray-100">
                          <i class="fas fa-trash text-red-500"></i>
                      </button>
                  </div>
                  <% if (product.stock <= 10) { %>
                      <span class="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-lg text-xs">
                          Low Stock
                      </span>
                  <% } %>
              </div>
              
              <div class="p-4">
                  <h3 class="font-semibold text-lg mb-2"><%= product.name %></h3>
                  <div class="flex justify-between items-center mb-2">
                      <span class="text-orange-500 font-bold">KES <%= product.price.toFixed(2) %></span>
                      <span class="text-gray-500 text-sm"><%= product.stock %> in stock</span>
                  </div>
                  
                  <div class="space-y-2">
                      <div class="flex items-center text-sm">
                          <i class="fas fa-chart-line w-5 text-gray-500"></i>
                          <span class="ml-2"><%= product.totalSold || 0 %> sold</span>
                      </div>
                      <div class="flex items-center text-sm">
                          <i class="fas fa-star w-5 text-yellow-400"></i>
                          <span class="ml-2"><%= product.averageRating || 0 %> (<%= product.reviewCount || 0 %> reviews)</span>
                      </div>
                  </div>

                  <div class="mt-4 grid grid-cols-2 gap-2">
                      <button onclick="quickEdit('<%= product._id %>')" 
                              class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg text-sm">
                          Quick Edit
                      </button>
                      <button onclick="viewDetails('<%= product._id %>')" 
                              class="bg-orange-100 hover:bg-orange-200 text-orange-700 px-4 py-2 rounded-lg text-sm">
                          View Details
                      </button>
                  </div>
              </div>
          </div>
      <% }); %>
  <% } else { %>
      <div class="col-span-full text-center py-8">
          <p class="text-gray-500">No products found.</p>
          <button onclick="showAddProductModal()" 
                  class="mt-4 bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg">
              Add Your First Product
          </button>
      </div>
  <% } %>
</div>

<!-- Pagination -->
<div class="flex justify-center items-center space-x-2 mb-8">
  <% if (currentPage > 1) { %>
      <a href="?page=<%= currentPage - 1 %>" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
          <i class="fas fa-chevron-left"></i>
      </a>
  <% } %>

  <% for(let i = 1; i <= totalPages; i++) { %>
      <a href="?page=<%= i %>" 
         class="px-4 py-2 border <%= currentPage == i ? 'border-orange-500 bg-orange-500 text-white' : 'border-gray-300' %> rounded-lg hover:bg-gray-50">
          <%= i %>
      </a>
  <% } %>

  <% if (currentPage < totalPages) { %>
      <a href="?page=<%= currentPage + 1 %>" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
          <i class="fas fa-chevron-right"></i>
      </a>
  <% } %>
</div>


      

      <!-- Add/Edit Product Modal -->
      <div id="productModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-bold" id="modalTitle">Add New Product</h2>
              <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-times"></i>
              </button>
            </div>
            
            <!-- Product Creation form --> 
<form id="productForm" class="space-y-6">
  <div class="grid grid-cols-2 gap-6">
      <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-2">Product Name*</label>
          <input type="text"
                 id="name" 
                 name="name" 
                 placeholder="Enter product name" 
                 class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500" 
                 required>
          <span class="error-message" id="nameError"></span>
      </div>
      <!-- SKU -->
      <div>
          <label for="sku" class="block text-sm font-medium text-gray-700 mb-2">SKU*</label>
          <input type="text" 
                 id="sku"
                 name="sku" 
                 placeholder="Enter product SKU" 
                 class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500" 
                 required>
          <span class="error-message" id="skuError"></span>
      </div>
  </div>
  <!-- CATEGORY -->
  <div class="grid grid-cols-2 gap-6">
      <div>
        <label for="category" class="block text-sm font-semibold text-gray-700 mb-1">
          Category*
      </label>
      <select id="category" 
              name="category" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent appearance-none bg-white">
          <option value="">Select a category</option>
          <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
          <% }) %>
      </select>
      <span class="error-message" id="categoryError"></span>
      </div>

      <!-- Price -->
      <div>
        <label for="price" class="block text-sm font-semibold text-gray-700 mb-1">
          Price (KES)*
      </label>
      <div class="relative">
          <span class="absolute left-3 top-3 text-gray-500">KES</span>
          <input type="number" 
                 id="price" 
                 name="price" 
                 required
                 min="0"
                 step="0.01"
                 class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                 placeholder="0.00">
      </div>
      <span class="error-message" id="priceError"></span>
      </div>
  </div>

  <div class="grid grid-cols-3 gap-6">
    <!-- Sale price -->
      <div>
        <label for="salePrice" class="block text-sm font-semibold text-gray-700 mb-1">
          Sale Price (KES)
      </label>
      <div class="relative">
          <span class="absolute left-3 top-3 text-gray-500">KES</span>
          <input type="number" 
                 id="salePrice" 
                 name="salePrice"
                 min="0"
                 step="0.01"
                 class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                 placeholder="0.00">
      </div>
      <span class="error-message" id="salePriceError"></span>
      </div>

      <!-- Stock Quantity -->
      <div>
        <label for="stock" class="block text-sm font-semibold text-gray-700 mb-1">
          Stock Quantity*
      </label>
      <input type="number"
             id="stock" 
             name="stock"
             placeholder="0" 
             min="0"
            class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500" 
             required>
              <span class="error-message" id="stockError"></span>
      </div>

      <!-- Weight -->
      <div>
        <label for="weight" class="block text-sm font-semibold text-gray-700 mb-1">
          Weight (kg)
      </label>
      <input type="number"
            id="weight" 
             name="weight" 
             placeholder="0.0" 
             min="0" 
             step="0.1"
             class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500">
             <span class="error-message" id="stockError"></span>
      </div>
  </div>
 

  <!-- Description Field -->
  <div>
      <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description*</label>
      <textarea id="description"
                name="description"
               rows="4" 
               placeholder="Describe your product..." 
                class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500" 
                required></textarea>
      <span class="error-message" id="descriptionError"></span>
  </div>

 <!-- Product Specifications -->
<div>
  <label class="block text-sm font-medium text-gray-700 mb-2">Product Specifications</label>
  <div id="specificationsContainer">
    <div class="specification-item flex space-x-2 mb-2">
      <input type="text" name="specifications[][title]" placeholder="Title (e.g., Material)" class="w-1/3 border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-orange-500">
      <input type="text" name="specifications[][description]" placeholder="Description (e.g., Stainless steel)" class="w-2/3 border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-orange-500">
      <button type="button" onclick="removeSpecification(this)" class="text-red-500 hover:text-red-700">✖</button>
    </div>
  </div>
  <button type="button" onclick="addSpecification()" class="mt-2 text-orange-600 hover:text-orange-700">+ Add Specification</button>
</div>


  <!-- Main Image Upload -->

  <div class="mb-6">
    <label class="block text-sm font-semibold text-gray-700 mb-2">Main Image*</label>
    <div class="flex items-center space-x-4">
        <div class="relative">
            <img id="mainImagePreview" 
                 src="/api/placeholder/150/150" 
                 alt="Main image preview" 
                 class="image-preview rounded-lg border">
            <button type="button" 
                    id="removeMainImage" 
                    class="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hidden hover:bg-red-600 transition-colors">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="flex-1">
            <label class="block w-full cursor-pointer">
                <span class="sr-only">Choose main image</span>
                <input type="file" 
                       multiple
                       id="imageUpload" 
                       name="mainImage" 
                       accept="image/*"
                       required
                       class="block w-full text-sm text-gray-500
                               file:mr-4 file:py-2 file:px-4
                              file:rounded-full file:border-0
                              file:text-sm file:font-semibold
                              file:bg-red-50 file:text-red-700
                              hover:file:bg-red-100"
                        onChange="productForm.previewImage(event)">
            </label>
            <p class="text-xs text-gray-500 mt-1">Click to upload an image or drag and drop</p>
            <p class="text-xs text-gray-500 mt-1">PNG, JPG up to 5MB</p>
            <span class="error-message" id="mainImageError"></span>
        </div>
    </div>
</div>


  <!-- Additional images upload -->
  <div class="mb-6">
    <label class="block text-sm font-semibold text-gray-700 mb-2">Additional Images</label>
    <div id="additionalImagesPreview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4"></div>
    <label class="block w-full cursor-pointer">
        <span class="sr-only">Choose additional images</span>
        <input type="file" 
               id="additionalImages" 
               name="additionalImages" 
               accept="image/*"
               multiple
               class="block w-full text-sm text-gray-500
                      file:mr-4 file:py-2 file:px-4
                      file:rounded-full file:border-0
                      file:text-sm file:font-semibold
                      file:bg-red-50 file:text-red-700
                      hover:file:bg-orange-100">
    </label>
    <p class="text-xs text-gray-500 mt-1">Up to 4 additional images</p>
    <span class="error-message" id="additionalImagesError"></span>
</div>

<div class="flex justify-end space-x-4">
  <button type="button" onclick="closeModal()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
    Cancel
  </button>

 <!-- Submit Button -->
 <button type="submit" 
 class="bg-red-500 text-white px-8 py-4 rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transform transition-transform duration-150 hover:scale-105 flex items-center space-x-2">
<span id="submitText" class="font-semibold">Save Product</span>
<i class="fas fa-arrow-right"></i>
<div id="submitSpinner" class="loading-spinner"></div>
</button>
</form>

        
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Delete Confirmation Modal -->
      <div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl p-6 w-full max-w-md">
          <h3 class="text-xl font-bold mb-4">Delete Product</h3>
          <p class="text-gray-600 mb-6">Are you sure you want to delete this product? This action cannot be undone.</p>
          <div class="flex justify-end space-x-4">
            <button onclick="closeDeleteModal()" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
              Cancel
            </button>
            <button onclick="deleteProduct()" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">
              Delete
            </button>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Toast Notification --> 
<div id="toast" class="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg transition-transform transform -translate-y-4 opacity-0">
        <i class="fas fa-check-circle mr-2"></i>
        <span>Product created successfully!</span>
      </div>

      <!-- Loading Spinner -->


  <footer class="mt-12 text-center text-gray-500 text-sm">
        <p>&copy; 2025 Zetu Cart • Seller Portal</p>
        <div class="mt-2">
          <a href="/seller/help" class="hover:text-orange-500">Help Center</a> • 
          <a href="/seller/terms" class="hover:text-orange-500">Terms for Sellers</a> • 
          <a href="/seller/support" class="hover:text-orange-500">Seller Support</a>
        </div>
      </footer>

  <script>

const productForm = {
  init() {
        this.form = document.getElementById('productForm');
        this.mainImageInput = document.getElementById('imageUpload');
        this.additionalImagesInput = document.getElementById('additionalImages');
        this.mainImagePreview = document.getElementById('mainImagePreview');
        this.removeMainImageBtn = document.getElementById('removeMainImage');
        this.additionalImagesPreview = document.getElementById('additionalImagesPreview');
        this.specificationsContainer = document.getElementById('specificationsContainer');
        this.submitBtn = this.form.querySelector('button[type="submit"]');
        this.submitText = document.getElementById('submitText');
        this.submitSpinner = document.getElementById('submitSpinner');
        
        this.setupEventListeners();
    },

    setupEventListeners() {
        if (this.form) {
            this.form.addEventListener('submit', this.handleSubmit.bind(this));
        }

        if (this.mainImageInput) {
            this.mainImageInput.addEventListener('change', this.previewImage.bind(this));
        }

        if (this.additionalImagesInput) {
            this.additionalImagesInput.addEventListener('change', this.handleAdditionalImagesChange.bind(this));
        }

        if (this.removeMainImageBtn) {
            this.removeMainImageBtn.addEventListener('click', this.handleRemoveMainImage.bind(this));
        }
    },


    previewImage(event) {
        const file = event.target.files[0];
        if (file) {
            if (file.size > 5 * 1024 * 1024) {
                this.showToast('Image size should not exceed 5MB', 'error');
                event.target.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                this.mainImagePreview.src = e.target.result;
                this.removeMainImageBtn.classList.remove('hidden');
            };
            reader.readAsDataURL(file);
        }
    },

    handleAdditionalImagesChange(event) {
        this.additionalImagesPreview.innerHTML = '';
        Array.from(event.target.files).forEach((file, index) => {
            if (index < 4) {
                if (file.size > 5 * 1024 * 1024) {
                    this.showToast(`Image ${file.name} exceeds 5MB limit`, 'error');
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('image-preview', 'rounded-lg', 'border');
                    this.additionalImagesPreview.appendChild(img);
                };
                reader.readAsDataURL(file);
            }
        });
    },

    handleRemoveMainImage() {
        this.mainImageInput.value = '';
        this.mainImagePreview.src = '/api/placeholder/150/150';
        this.removeMainImageBtn.classList.add('hidden');
    },        
    
            async handleSubmit(event) {
                event.preventDefault();
                
                if (!this.validateForm()) {
                    console.error('Form validation failed', this.form);
                    return;
                }

                // Manually collect specifications
    const specificationInputs = document.querySelectorAll('.specification-item');
    const specifications = [];
    
    specificationInputs.forEach(item => {
        const titleInput = item.querySelector('input[name="specifications[][title]"]');
        const descInput = item.querySelector('input[name="specifications[][description]"]');
        
        if (titleInput && descInput) {
            specifications.push({
                title: titleInput.value.trim(),
                description: descInput.value.trim()
            });
        }
    });
    
                this.setLoadingState(true);
    
                try {
                    const formData = new FormData(this.form);
                    formData.append('specifications', JSON.stringify(specifications));
                    console.log('Form data:', formData);
                    
                    for (let [key, value] of formData.entries()) {
                        console.log(`${key}: ${value}`);
                    }

                    const response = await fetch('/products/create-new', {
                        method: 'POST',
                        body: formData
                    });
    
                    const result = await response.json();
                    console.log('Response:', result);
    
                    if (response.ok) {
                        this.showToast('Product created successfully!', 'success');
                        alert('Product created successfully!');
                        // Redirect to dashboard after a short delay
                        setTimeout(() => {
                            window.location.href = '/api/seller/products';
                        }, 1500);
                    } else {
                        throw new Error(result.message || 'Failed to create product');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showToast(error.message, 'error');
                    this.setLoadingState(false);
                }
            },
    
            validateForm() {
                let isValid = true;
    
                // Clear previous error messages
                document.querySelectorAll('.error-message').forEach((el) => {
                    el.style.display = 'none';
                });
    
                // Validate Product Name
                const name = this.form.name.value.trim();
                if (!name) {
                    document.getElementById('nameError').textContent = 'Product name is required.';
                    document.getElementById('nameError').style.display = 'block';
                    isValid = false;
                }
    
                // Validate SKU
                const sku = this.form.sku.value.trim();
                if (!sku) {
                    document.getElementById('skuError').textContent = 'SKU is required.';
                    document.getElementById('skuError').style.display = 'block';
                    isValid = false;
                }
    
                // Validate Category
                const category = this.form.category.value;
                if (!category) {
                    document.getElementById('categoryError').textContent = 'Category is required.';
                    document.getElementById('categoryError').style.display = 'block';
                    isValid = false;
                }
    
                // Validate Price
                const price = this.form.price.value.trim();
                if (!price || price <= 0) {
                    document.getElementById('priceError').textContent = 'Price must be greater than 0.';
                    document.getElementById('priceError').style.display = 'block';
                    isValid = false;
                }
    
                // Validate Sale Price (if provided)
                const salePrice = this.form.salePrice.value.trim();
                if (salePrice && parseFloat(salePrice) >= parseFloat(price)) {
                    document.getElementById('salePriceError').textContent = 'Sale price must be less than regular price.';
                    document.getElementById('salePriceError').style.display = 'block';
                    isValid = false;
                }
    
                // Validate Stock
                const stock = this.form.stock.value.trim();
                if (!stock || stock < 0) {
                    document.getElementById('stockError').textContent = 'Stock must be 0 or more.';
                    document.getElementById('stockError').style.display = 'block';
                    isValid = false;
                }
    
                // Validate Description
                const description = this.form.description.value.trim();
                if (!description) {
                    document.getElementById('descriptionError').textContent = 'Description is required.';
                    document.getElementById('descriptionError').style.display = 'block';
                    isValid = false;
                }

                const specifications = document.querySelectorAll('.specification-item');
specifications.forEach((spec, index) => {
  const title = spec.querySelector('input[name="specifications[][title]"]').value.trim();
  const description = spec.querySelector('input[name="specifications[][description]"]').value.trim();

  if (title && !description) {
    this.showToast(`Specification ${index + 1} is missing a description`, 'error');
    isValid = false;
  }

  if (!title && description) {
    this.showToast(`Specification ${index + 1} is missing a title`, 'error');
    isValid = false;
  }
});

if (specifications.length > 10) {
  this.showToast('Maximum of 10 specifications allowed.', 'error');
  isValid = false;
}
    
                // Validate Main Image
                // if (!this.mainImageInput.files.length) {
                //     document.getElementById('mainImageError').textContent = 'Main image is required.';
                //     document.getElementById('mainImageError').style.display = 'block';
                //     isValid = false;
                // }
    
                return isValid;
            },

    
            handleMainImageChange(event) {
                const preview = document.getElementById('previewId');
                const file = event.target.files[0];
                if (file) {
                    if (file.size > 5 * 1024 * 1024) {
                        this.showToast('Image size should not exceed 5MB', 'error');
                        event.target.value = '';
                        return;
                    }
    
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        preview.innerHTML = `
                        <img src="${e.target.result}" class="mx-auto h-32 w-32 object-cover rounded-lg">
                    `;
                    };
                    reader.readAsDataURL(file);
                }
            },
    
            handleAdditionalImagesChange(event) {
                this.additionalImagesPreview.innerHTML = '';
                Array.from(event.target.files).forEach((file, index) => {
                    if (index < 4) {
                        if (file.size > 5 * 1024 * 1024) {
                            this.showToast(`Image ${file.name} exceeds 5MB limit`, 'error');
                            return;
                        }
    
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.classList.add('image-preview', 'rounded-lg', 'border');
                            this.additionalImagesPreview.appendChild(img);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            },
    
            handleRemoveMainImage() {
                this.mainImageInput.value = '';
                this.mainImagePreview.src = '/api/placeholder/150/150';
                this.removeMainImageBtn.classList.add('hidden');
            },
    
            setLoadingState(isLoading) {
                this.submitText.style.display = isLoading ? 'none' : 'inline';
                this.submitSpinner.style.display = isLoading ? 'block' : 'none';
                this.submitBtn.disabled = isLoading;
            },
    
            showToast(message, type = 'info') {
                const toast = document.getElementById('toast');
                toast.querySelector('span').textContent = message;
                toast.classList.remove('bg-gray-900', 'bg-red-600', 'bg-green-600');
                toast.classList.add(type === 'success' ? 'bg-green-600' : 'bg-red-600');
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
    
                setTimeout(() => {
                    toast.style.opacity = '0';
                    toast.style.transform = 'translateY(100%)';
                }, 3000);
            },
    
            resetForm() {
                this.form.reset();
                this.handleRemoveMainImage();
                this.additionalImagesPreview.innerHTML = '';
                document.querySelectorAll('.error-message').forEach(el => {
                    el.style.display = 'none';
                });
            }
        };
    
        document.addEventListener('DOMContentLoaded', () => {
            productForm.init();
        });
    // Modal Functions
    function showAddProductModal() {
      document.getElementById('productModal').classList.remove('hidden');
    }

    function closeModal() {
      document.getElementById('productModal').classList.add('hidden');
    }

    function confirmDelete(productId) {
      document.getElementById('deleteModal').classList.remove('hidden');
      document.getElementById('deleteModal').setAttribute('data-product-id', productId);
    }

    function closeDeleteModal() {
      document.getElementById('deleteModal').classList.add('hidden');
    }

    function deleteProduct() {
    const productId = document.getElementById('deleteModal').getAttribute('data-product-id');
    
    fetch(`/products/${productId}`, {
        method: 'DELETE'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete product');
        }
        return response.json();
    })
    .then(data => {
        closeDeleteModal();
        showToast('Product deleted successfully', 'success');
        alert('Product deleted successfully');
        // Optionally, remove the product from the UI
        document.querySelector(`[data-product-id="${productId}"]`).remove();
    })
    .catch(error => {
        console.error('Delete error:', error);
        showToast('Error deleting product', 'error');
    });
}

    function quickEdit(productId) {
      // Implement quick edit functionality
      console.log('Quick editing product:', productId);
    }

    function viewDetails(productId) {
      // Implement view details functionality
      console.log('Viewing details for product:', productId);
    }

    function addSpecification() {
    const container = document.getElementById('specificationsContainer');
    const specItem = document.createElement('div');
    specItem.classList.add('specification-item', 'flex', 'space-x-2', 'mb-2');

    specItem.innerHTML = `
        <input type="text" name="specifications[][title]" placeholder="Title (e.g., Material)" class="w-1/3 border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-orange-500">
        <input type="text" name="specifications[][description]" placeholder="Description (e.g., Stainless steel)" class="w-2/3 border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-orange-500">
        <button type="button" onclick="removeSpecification(this)" class="text-red-500 hover:text-red-700">✖</button>
    `;

    container.appendChild(specItem);
}

function removeSpecification(button) {
    button.parentElement.remove();
}


    // File upload preview (if needed)
    document.getElementById('imageUpload').addEventListener('change', function(e) {
      // Implement image preview functionality
      console.log('Files selected:', e.target.files);
    });

    document.addEventListener('DOMContentLoaded', () => {
      productForm.init();
    })
  </script>
</body>
</html>